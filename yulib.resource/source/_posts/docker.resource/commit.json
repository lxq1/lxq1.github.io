{"compress":true,"commitItems":[["d15acb21-7025-4a17-9f0d-0861abb79db9",1532327735231,"# docker\n\nCentOS Docker 安装\n\n> [参考地址](http://www.runoob.com/docker/centos-docker-install.html)\n\n## 前提条件\n\n目前，CentOS 仅发行版本中的内核支持 Docker。\n\nDocker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。\n\nDocker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。\n\n## 查询版本\n\n\n```\ncat /etc/redhat-release \n```\n\n## 使用 yum 安装\n\n```\nuname -r ##查看内核版本是否符合要求\n\n```\n\n## 安装 Docker\n```\nyum -y install docker-io\n\nservice docker start    #启动 Docker 后台服务\n\n```\n\n\n\n## 安装Compose\n\n```\n\ncurl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n\nchmod +x /usr/local/bin/docker-compose\n\ndocker-compose up -d #运行yml\n\n```\n\n## 测试docker\n\n```\ndocker run hello-world\n\n```\n\n由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。\n\n## 镜像加速\n\n鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com\n\n```\n#重启\nservice docker restart \n```\n## Docker Hello World\nDocker 允许你在容器内运行应用程序， 使用 docker run 命令来在容器内运行一个应用程序。\n\n```\ndocker run ubuntu:15.10 /bin/echo \"Hello world\" #Docker 以 ubuntu15.10 镜像创建一个新容器，然后在容器里执行 bin/echo \"Hello world\"，然后输出结果。\n```\n\n\n\n## 运行交互式的容器\n我们通过docker的两个参数 -i -t，让docker运行的容器实现\"对话\"的能力\n\n```\ndocker run -i -t ubuntu:15.10 /bin/bash ##泓奥云\n```\n\n```\n\ndocker run centos:6.8 /bin/echo \"hello world\" ##腾讯云\n\n```\n\n\n各个参数解析：\n\n* -t:在新容器内指定一个伪终端或终端。\n\n* -i:允许你对容器内的标准输入 (STDIN) 进行交互。\n\n我们尝试在容器中运行命令 cat /proc/version和ls分别查看当前系统的版本信息和当前目录下的文件列表。\n\n我们可以通过运行exit命令或者使用CTRL+D来退出容器。\n\n\n## 启动容器\n\n泓奥云\n```\ndocker run -d ubuntu:15.10 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n```\n腾讯云\n```\ndocker run -d centos:6.8 /bin/sh -c \"while true; do echo hello world; sleep 1; done\"\n```\n\n在容器内使用docker logs命令，查看容器内的标准输出\n\n```\ndocker logs ** #填写docker id\n\n```\n\n## 停止容器\n\n```\n\ndocker stop ** #填写docker id\n```\n\n## 运行一个web应用\n\n接下来让我们尝试使用 docker 构建一个 web 应用程序。\n\n我们将在docker容器中运行一个 Python Flask 应用来运行一个web应用。\n\n```\n\ndocker pull training/webapp\n\ndocker run -d -P training/webapp python app.py\n\n\n```\n\nDocker 开放了 5000 端口（默认 Python Flask 端口）映射到主机端口 32769 上。\n\n这时我们可以通过浏览器访问WEB应用\n\n\n\n## 进入容器\n\n```\n\ndocker exec -it <docker_name> /bin/bash\n```\n其中，/bin/bash有可能是/bin/sh，因为不一定所有的docker都安装了shell\n\n\n## 卸载docker\n\n```\n\nrpm -e docker-io\n```\n卸载Docker后,/var/lib/docker/目录下会保留原Docker的镜像,网络,存储卷等文件. 如果需要全新安装Docker,需要删除/var/lib/docker/目录\n\n```\nrm -fr /var/lib/docker/\n\n```\n\n## 卸载镜像\n\n1. 删除前需要保证容器是停止的  stop\n\n2. 需要注意删除镜像和容器的命令不一样。 docker rmi ID  ,其中 容器(rm)  和 镜像(rmi)\n\n3. 顺序需要先删除容器\n\n```\ndocker rmi 镜像id\n\n\n```\n\n## 修改已经存在的docker容器的映射端口\n\n1. 停止容器\n2. 停止docker\n3. 进入    /var/lib/docker/containers/ 容器ID的文件夹\n4. 修改config.v2.json和hostconfig.json\n5. 启动docker\n6. 启动容器\n\n\n\n",[[1532327677762,["lixq@lixq-PC",[[1,0,"\n"]],[0,0],[1,1]]],[1532327680337,["lixq@lixq-PC",[[1,0,"···"]],[0,0],[3,3]]],[1532327681621,["lixq@lixq-PC",[[-1,0,"···"]],[3,3],[0,0]]],[1532327682570,["lixq@lixq-PC",[[1,0,"---"]],[0,0],[3,3]]],[1532327684651,["lixq@lixq-PC",[[1,4,"\n---\n\ntitle"]],[3,3],[9,9]]],[1532327685117,["lixq@lixq-PC",[[1,10,"\n"]],[9,9],[10,10]]],[1532327685879,["lixq@lixq-PC",[[-1,10,"\n"]],[10,10],[9,9]]],[1532327687584,["lixq@lixq-PC",[[1,9,":"]],[9,9],[10,10]]],[1532327687809,["lixq@lixq-PC",[[1,11,"\n"]],[10,10],[11,11]]],[1532327689908,["lixq@lixq-PC",[[1,11,"tags:"]],[11,11],[16,16]]],[1532327690142,["lixq@lixq-PC",[[1,17,"\n"]],[16,16],[17,17]]],[1532327691912,["lixq@lixq-PC",[[1,17,"cv"]],[17,17],[19,19]]],[1532327692307,["lixq@lixq-PC",[[-1,18,"v"]],[19,19],[18,18]]],[1532327694842,["lixq@lixq-PC",[[1,18,"ategro"]],[18,18],[24,24]]],[1532327697260,["lixq@lixq-PC",[[-1,21,"gro"]],[24,24],[21,21]]],[1532327711511,["lixq@lixq-PC",[[1,21,"gories:"]],[21,21],[28,28]]],[1532327724371,["lixq@lixq-PC",[[1,10," docker学习进度1"]],[10,10],[22,22]]],[1532327728736,["lixq@lixq-PC",[[1,28," linux"]],[28,28],[34,34]]],[1532327730124,["lixq@lixq-PC",[[-1,29,"linux"]],[34,34],[29,29]]],[1532327730942,["lixq@lixq-PC",[[1,30,"\n"]],[29,29],[30,30]]],[1532327733210,["lixq@lixq-PC",[[1,30,"- linux"]],[30,30],[37,37]]],[1532327733452,["lixq@lixq-PC",[[1,38,"\n"]],[37,37],[38,38]]],[1532327734239,["lixq@lixq-PC",[[1,38,"-"]],[38,38],[39,39]]],[1532327770281,[null,[[-1,4,"\n---\n"],[1,9,"title"],[-1,52,"title"],[1,57,"---\n\n"]],[4,4],[62,62]]],[1532327770281,[null,[[1,4,"\n---\n"],[-1,4,"title"],[1,52,"title"],[-1,52,"---\n\n"]],[62,62],[4,4]]],[1532327735451,["lixq@lixq-PC",[[1,39,"docker"]],[39,39],[45,45]]],[1532327738360,["lixq@lixq-PC",[[1,39," "]],[39,39],[40,40]]],[1532327743616,["lixq@lixq-PC",[[1,58,"学习"]],[58,58],[60,60]]],[1532327744301,["lixq@lixq-PC",[[-1,58,"学习"]],[60,60],[58,58]]],[1532327745255,["lixq@lixq-PC",[[1,58,"软件"]],[58,58],[60,60]]],[1532327746108,["lixq@lixq-PC",[[-1,58,"软件"]],[60,60],[58,58]]],[1532327748618,["lixq@lixq-PC",[[1,58,"学习"]],[58,58],[60,60]]]],null,"lixq@lixq-PC"]]}